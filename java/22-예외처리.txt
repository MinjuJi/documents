예외처리
	- 오류의 종류
		- 에러(Error)
			- 시스템, 운영체제, JVM의 잘못으로 발생되는 것
			- 개발자가 해결할 수 있는 문제가 아님
			- 예외처리의 대상이 아님
		- 예외(Exception)
			- UnChecked 예외
				- RuntimeException 클래스와 그 자식 클래스들이다.
				- 주로 개발자의 코딩 실수로 발생되는 오류들이다.
				- 컴파일러가 예외처리 여부를 체크하지 않는다.
				- 주요 예외 클래스
					- RunTimeException
					  * 모든 UnChecked Exception의 부모 클래스다.
					- NullPointerException
					  * 참조변수의 값이 null인 상태에서 필드나 메소드를 
                                            사용할 때 발생하는 예외 클래스다.
					- ClassCastException
					  * 클래스 형변환이 가능하지 않을 때 발생하는 예외 클래스다.
					- ArithmeticException
					  * 나눗셈에서 어떤 값을 0으로 나눌 때 발생하는 예외 클래스다.
					- IndexOutOfBoundsException
					  * 배열, 리스트, 문자열에서 인덱스 범위를 벗어난 위치를 
                                            조회했을 때 발생하는 예외 클래스다.
					- NumberFormatException
					  * Integer.parseInt(s), Double.parseDouble(s) 등에서
                                            s에 숫자가 아닌 문자가 포함되어 있을 때 발생하는 
					    예외클래스다.
			- Checked 예외
				- Exception 클래스의 자식 클래스 중에서 RunTimeException 클래스와
			     	  무관한 클래스다.
				- 사용자의 잘못된 사용으로 인해 발생하는 오류들이다.
				- 컴파일러가 예외처리 구현 여부를 반드시 체크한다.
                                  * 예외처리 관련 코드가 구현되어 있지 않으면 컴파일 오류가 발생한다.
				  * 최신의 라이브러리나 프레임워크에서는 잘 사용하지 않는다.
				- 주요 클래스
					- Exception
					  * 모든 Checked Exception의 부모 클래스다.
					- ClassNotFoundException
					  * 클래스파일을 찾을 수 없을 때 발생하는 예외클래스다.
					- IOException
					  * 읽기/쓰기 하는 도중 오류가 발생했을 때 발생하는 예외클래스다.
					- FileNotFoundException
					  * 파일을 찾을 수 없을 때 발생하는 예외 클래스다.
					- SQLException
					  * 데이터베이스 엑세스 작업 중 오류가 발생했을 때 발생하는 예외클래스다.

예외처리하기
	- 직접처리
		try {
			예외발생이 예상되는 수행문1;
			수행문2;
			수행문3;
		} catch (발생이예상되는예외클래스명 변수명) {
			예외 발생시 실행될 수행문4;
			예외 발생시 실행될 수행문5;
		}
		수행문6;

		* 수행문1에서 예외발생한 경우
			수행문1 -> 수행문4 -> 수행문5 -> 수행문6
		* 수행문1에서 예외가 발생하지 않았을 경우
			수행문1 -> 수행문2 -> 수행문3 -> 수행문6
		- try ~ catch 블록 작성법
			try {
				1번예외발생이 예상되는 수행문;
				2번예외발생이 예상되는 수행문;
				수행문;
			} catch(1번예외클래스 변수명) {

			} catch(2번예외클래스 변수명) {

			} catch(Exception 변수명) {

			}
			* catch 블록에서 부모예외클래스를 아래쪽에 적는다.
			* 맨 마지막 catch 블록에는 Exception 클래스를 지정해서 예상하지 못한
			  예외도 잡을 수 있도록 한다.
	- 위임하기
		public void method() throws 예외클래스명, 예외클래스명, ... {
			예외발생이 예상되는 수행문;
			예외발생이 예상되는 수행문;
		}
		* throws 키워드를 사용해서 메소드내의 수행문에서 발생이 예상되는 예외들의 처리를
		  메소드를 호출하는 측에게 처리를 위임할 수 있다.
			* 해당 메소드에서 예외처리와 관련한 코드의 작성을 할 필요가 없다.
			* 예외처리를 각각의 메소드에서 직접 개별적으로 처리하지 않고,
			  한 군데에서 일괄처리하게 만들 수 있다. 

Throwable
	- Error, Exception의 부모 클래스
	- 오류와 관련된 모든 메소드들이 구현되어 있다.
	- 모든 Error, Exception 클래스는 Throwable에 구현된 메소드를 상속받고, 사용할 수 있다.
	- 특별한 경우가 아니면 사용자정의 예외클래스를 정의할 때 생성자만 정의해도 된다.
	- 주요 생성자
		public Throwable() { ... }
			기본생성자
		public Throwable(String message) { ... }
			오류와 관련된 메세지를 전달받는 생성자
		public Throwable(String message, Throwable cause) { ... }
			오류와 관련된 메세지 및 오류의 원인이 되었던 이전 예외객체를 전달받는 생성자
		public Throwable(Throwable cause) { ... }
			오류의 원인이 되었던 이전 예외객체를 전달받는 생성자
	- 주요 메소드
		Throwable	getCouse()
				오류발생의 원인이 되었던 오류를 반환한다.
	*	String		getMessage()
				오류와 관련된 상세한 메세지를 반환한다.
	*	void		printStackTrace()
				오류 발생과 관련되어서 실행되었던 코드를 화면에 출력한다.
				오류검출을 위한 디버깅 작업에서 참조한다. 
		void 		printStackTrace(PrintStream s)
				오류 발생과 관련되어서 실행되었던 코드를 화면이 아닌 다른 곳에 출력하게 할 수 있다.
		void		printStackTrace(PrintWriter s)
				오류 발생과 관련되어서 실행되었던 코드를 화면이 아닌 다른 곳에 출력하게 할 수 있다.

사용자정의 예외클래스 
	- Checked 예외클래스 만들기
		- Exception 클래스를 상속받아서 사용자정의 예외 클래스를 만든다.
	- Unchecked 예외클래스 만들기
		- RuntimeException 클래스를 상속받아서 사용자정의 예외 클래스를 만든다.
		- 현재는 대부분 Unchecked 사용자정의 예외클래스를 선호합니다.
	- 사용자정의 예외클래스 정의하기
		public class MyException extends RuntimeException {
			public MyException() {}
			public MyException(String message) {
				super(message);
			}
			public MyException(String message, Throwable cause) {
				super(message, cause);
			}
			public MyException(Throwable cause) {
				super(cause);
			}
		} 
		* Throwable클래스가 메세지와 이전예외를 저장하는 필드와 관련 기능을 가지고 있기 
		  때문에 부모 생성자를 호출해서 값을 전달한다. 

예외의 변환
	- 실제 발생한 예외 대신 사용자정의 예외를 발생시키는 것
	- 여러 종류의 예외를 처리하는 것보다 사용자정의 예외만 처리하도록 하는 것이 목적이다.
	작성예)
		try {
			예외발생이 예상되는 코드 <--- SQLException 이 발생예상됨
		} catch (SQLException e) {
			throw new 사용자정의예외클래스("메세지", e);
		}
		* SQLException을 사용자정의예외로 전환함.

강제 예외발생
	- 업무로직상의 오류가 있는 경우(비밀번호 불일치, 잔액부족, 로그인 실패 등)
	  예외를 강제로 발생시켜서 해당 기능을 호출한 측에게 오류가 발생했음을 알리는 것이다.
	- throw 키워드를 사용한다.
	- 작성예)
		throw new 사용자정의예외클래스("에러메세지");

finally 블록
	- finally 블록에는 예외 발생 유무와 상관없이 
          반드시 실행되어야 하는 수행문을 작성하는 블록이다.
	- 애플리케이션 실행 중 점유했던 시스템의 자원(리소스)을 해제하는 코드(수행문)을 주로 작성한다.
	- 데이터베이스 엑세스 작업에서 트랜잭션처리와 관련된 코드를 작성한다.

	사용예)
		try {
			예외발생이 예상되는 수행문1;
			예외발생이 예상되는 수행문2;
			수행문3;
		} catch (예외클래스 e) {
			수행문4;
		} catch (예외클래스 e) {
			수행문5;
		} finally {
			수행문6;	<--- 애플리케이션이 점유했던 자원을 해제하는 수행문
		}
		* 예외발생시 : 수행문1 or 수행문2(예외발생) -> 수행문4 or 수행문5 -> 수행문6
		* 정상 실행 : 수행문1 -> 수행문2 -> 수행문3 -> 수행문 6
		* 수행문3/수행문4/수행문5 은 예외발생 유무에 따라서 실행될 수 있고, 아닐 수도 있다.
		* 수행문6 항상 실행 
		
		try {
			예외발생이 예상되는 수행문1; <--- Unchecked 예외가 발생하는 수행문;
		} finally {
			수행문;		<--- 애플리케이션이 점유했던 자원을 해제하는 수행문
		}


점유자원 자동해제
	- AutoCloseable을 구현한 클래스는 점유했던 자원에 대한 자동해제가 지원된다.
	- 자바 1.7버전부터 지원
	- 작성예)
	try (시스템의 자원을 사용하는 객체 생성) {
		시스템의 자원을 사용하는 수행문;	// 입출력, 네트워킹, 데이터베이스엑세스
	} catch(예외클래스 변수명) {
		예외발생시 수행할 수행문;
	}
	















				













