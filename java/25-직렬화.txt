객체의 직렬화(Serialization)와 역직렬화(Deserialization)
	- 직렬화
		객체를 스트림을 통해서 전송가능한 상태로 바꾸는 것이다.
		ObjectOutputStream
			void writeObject(Object target)
				대상객체를 직렬화한다.
	- 역직렬화
		스트림을 통해서 전송받은 데이터로 객체를 복원하는 것이다.
		ObjectInputStream
			Object readObject()
				객체를 복원한다.
	* 직렬화/역직렬화 가능 객체의 필수 조건
		대상객체는 java.io.Serializable 인터페이스를 구현한 객체 
		대상객체가 포함하고 있는 객체도 java.io.Serializable 인터페이스를 구현한 객체 
	* 직렬화대상에서 제외시키기
		해당 필드에 transient 키워드를 추가한다.		

	* 웹개발자는 직렬화/역직렬화화 관련된 코드를 직접 작성하는 경우는 극히 드물다.
	  (단, 서버(웹서버, 채팅서버, 게임서버)개발자의 경우에만 직렬화/역직렬화 관련 코드를 
	   작성할 수도 있다.)
		- 직렬화 가능한 객체가 되게 하는 방법
			대상객체도 java.io.Serializable 인터페이스 구현
			대상객체에 포함된 객체도 java.io.Serializable 인터페이스 구현
		- 직렬화 대상에서 제외시키는 방법
			해당 필드에 transient 키워드 추가
		- serialVersionUID 정의하는 방법
			이클립스의 serialVersionUID 생성기능 사용

	* serialVersionUID 
		- 스트림 고유 식별자(stream unique identifier)
		- 직렬화 가능한 모든 클래스는 고유 식별자를 가진다.
		  * static final long serialVersionUID를 명시적으로 정의하지 않으면,
		    컴파일시에 자동으로 생성된다.
		  * 직렬화한 후에 클래스를 변경했다면 고유 식별자값이 변경된다.
                    역직렬화할 때 InvalidClassException이 발생한다.
		- serialVersionUID를 명시적으로 정의하면 직렬화 후 클래스가 변경되어도
		  역직렬화할 때 문제가 발생하지 않는다.


마샬링(Marshalling)과 언마샬링(UnMarshalling)
	- 마샬링은 주로 서로 다른 시스템 혹은 프로그램간의 데이터 이동에 사용된다.
	- 객체(데이터)를 전송하기 위해서 상호호환성이 높은 형태로 변경하는 것을 말한다.
	  예) 객체 ---> XML 형식의 텍스트, 객체 ----> JSON 형식의 텍스트 









	