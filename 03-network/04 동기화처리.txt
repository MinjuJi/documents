synchronized
	- 동기화 처리
		- 멀티스레드 환경에서 실행되는 프로그램이 임계값
                  (여러 스레드가 동시에 변경할 수 있는 값)을
  	  	  가지고 있다면, 해당 프로그램은 Thread-Unsafe한 프로그램이 된다.
		- 멀티스레드의 동시접근을 차단하는 것이 동기화처리다.
		- 방법
			- 동기화처리된 메소드를 만든다.
                          * 메소드내의 모든 수행문이 동기화처리의 대상이 된다.
			  public class Sample {
				필드타입 필드명; <---- 임계값

				public synchronized void work() {
					임계값을 변경하는 수행문;
					임계값을 변경하는 수행문;
					임계값을 변경하는 수행문;
					임계값을 변경하는 수행문;
					임계값을 변경하는 수행문;
				}
			  }

			- 동기화처리된 블록을 만든다.
			  public class Sample {
				필드타입 필드명; <---- 임계값
				
				public void work() {
					그냥 수행문;
					그냥 수행문;
					synchronized(this) {
						임계값을 변경하는 수행문;
						임계값을 변경하는 수행문;
					}
					그냥 수행문;
				}
			  }
	- 콜렉션의 동기화처리
		- 동기화처리가 지원되는 클래스를 사용
		  * Vector (ArrayList 대신)
                  * HashTable (HashMap 대신)
		- 동기화처리가 지원되지 않는 클래스를 동기화처리가 가능하게 하기
		  * List<String> list = Collections.synchronizedList(new ArrayList<String>());
		  * Set<String> set = Collections.synchronizedSet(new HashSet<String>());
		  * Map<String, Object> map = Collections.synchronizedMap(new HashMap<String, Object>());


멀티스레드 환경에서 안전한 클래스 작성하기
	- 여러 스레드가 동시에 변경할 수 있는 필드를 정의하지 않는다.
	- 필드를 읽기전용의 용도로 사용한다.
	- 업무로직 수행에 필요한 값들은 해당 메소드내의 변수에만 저장한다

















			  
