1. boards.xml, boardTypes.xml 파일 생성
2. SqlMapConfig.xml 파일 생성
	* 설정추가
3. IbatisUtils.java 클래스 정의
4. BoardDao.java와 BoardTypeDao.java 클래스 정의

홈페이지(home.jsp)
	* 가장 최근에 등록된 글 3개를 표시한다.
		Top-N 분석 활용(board_no로 역순정렬)
	* 더보기 링크 제공

리스트(list.jsp)
	* 모든 게시글 정보를 표시한다.
		board_no의 역순으로 표시
	* 게시글의 제목을 클릭하면 상세정보페이지(detail.jsp)가 이동한다.
	* 새글 등록 링크를 제공한다. 링크를 클릭하면 등록폼(form.jsp)로 이동한다.

등록폼(form.jsp)
	* 새글을 등록하면 입력폼을 표시한다.
		- 글의 종류(select), 제목, 등록자, 내용, 비밀번호 입력을 제공한다.
	* 제출버튼을 클릭하면 add.jsp에 입력폼의 값들을 제출한다.

등록(add.jsp)
	* 새글 등록작업 수행
		등록폼에서 전달한 값을 조회해서, 객체에 저장한다.
	* Dao를 이용해서 새글을 등록한다.
	* 새글 등록이 완료되면 list.jsp를 재요청하게 하는 응답을 보낸다.

상세(detail.jsp)
	* 게시글의 상제정보 화면에 표시
	* 글번호에 해당하는 게시글 정보 조회 후  화면에 표시
	* 수정, 삭제, 목록으로 이동하는 링크를 제공한다.

수정 및 삭제
	* 상세 화면에서 수정/삭제 버튼을 클릭하면 비밀번호 입력화면(passwordform.jsp)를 
	  요청하게 된다.
	* passwordform.jsp에는 글번호와 수정버튼(job=modify) 혹은 삭제버튼(job=delete)을 
          눌렀는지의 정보가 전달된다.
	* passwordform.jsp
		* 글번호(no)와 작업구분(job)를 요청객체에서 조회한다.
		* 글번호(no)와 작업구분(job)을 hidden으로 폼에 설정한다.
		* 비밀번호를 입력하고 확인버튼을 클릭하면 비밀번호체크(passwordcheck.jsp)로
		  글번호(no), 작업구분(job), 비밀번호(password)가 전달된다.
	* passwordcheck.jsp
		* 글번호(no), 작업구분(job), 비밀번호(password)를 요청객체에서 조회한다.
		* 글번호에 해당하는 글(Board)정보를 조회한다.
		* 글정보(Board)에 저장된 비밀번호와 요청객체에서 조회한 비밀번호가 일치하는지 확인한다.
			* 일치하고 작업구분(job)이 modify이면 
				modifyform.jsp?no=글번호를 재요청URL로 보낸다.
			* 일치하고  작업구분(job)이 delete이면
				delete.jsp?no=글번호를 재요청URL로 보낸다.
			* 일치하지 않으면 
				list.jsp를 재요청URL로 보낸다.
	* modifyform.jsp
		* 글번호를 요청객체에서 조회한다.
		* 글번호에 해당하는 글정보를 조회한다.
		* select박스에 표시할 글종류정보를 조회한다.
		* 글번호(no)를 hidden으로 폼에 설정한다.
		* 기존 글 정보를 입력필드에 설정한다.
		* 수정버튼을 클릭하면 modify.jsp로 폼 입력값들이 전달된다.
	* modify.jsp
		* modifyform.jsp에서 제출된 값(글번호, 제목, 저자, 내용, 비밀번호)을 
		  요청객체에서 전부 조회한다.
		* 글번호에 해당하는 기존 글정보를  DB에서 조회한다.
		* 조회된 글정보에 요청객체에서 조회된 제목, 저자, 내용, 비밀번호를 저장한다.
                * 갱신된 글정보를 DB에 반영한다.
		* list.jsp를 재요청 URL로 보낸다.
	* delete.jsp
		* 글번호를 요청객체에서 조회한다.
		* 글번호에 해당하는 글정보를 삭제한다.
		* list.jsp를 재요청 URL로 보낸다.
		
		

					






