오라클 내장함수
	- SQL 작성이 사용할 수 있는 유용한 기능이 제공되는 함수
	  * DBMS 제품마다 조금씩 차이가 있다.
	- 종류
		- 단일행 함수
			- 조회된 행마다 하나의 결과를 반환한다.
			- 단일행 함수는 중첩해서 사용할 수 있다.
			- 종류
				- 문자함수 : 문자를 입력값으로 받아서 계산한 결과를 반환
				- 숫자함수 : 숫자를 입력값으로 받아서 계산한 결과를 반화
				- 날짜함수 : Date 타입의 값에 대한 처리를 수행
				- 변환함수 : 데이터의 타입을 변환하는 처리를 수행
				- 기타함수 : nvl, case, decode 등의 함수가 있다.
		- 다중행 함수(그룹함수)
			- 조회된 행을 그룹으로 묶고 행 그룹당 하나의 결과를 반환한다.
			- group by 절을 사용해서 조회된 행을 그룹으로 묶고 다중행 함수로
			  각 그룹당 하나의 결과(합계, 평균, 분산, 표준편차, 최고값, 최저값) 등을
			  계산해 낸다. 
	- 문자 함수
		lower(column or exp)
		upper(column or exp)
		substr(column or exp, beginIndex)
		substr(column or exp, beginIndex, length)
		concat(column or exp, column or exp)
		length(column or exp)
		instr(column or exp, 'string')
		instr(column or exp, 'string', beginIndex)
		instr(column or exp, 'string', beginIndex, count)
		lpad(column or exp, length, 'string')
		rpad(column or exp, length, 'string')
		trim(column or exp)
		replace(column or exp, 'search_string', 'replacement_string')
	- 숫자함수
		round(column or exp)		
		round(column or exp, n)
		trunc(column or exp)
		trunc(column or exp, n)
		ceil(column or exp)
		floor(column or exp)
		mod(m, n)
	- 날짜함수
		sysdate
		날짜 + 숫자
		날짜 - 숫자
		날짜 - 날짜
		round(날짜)
		trunc(날짜)
		months_between(날짜, 날짜)
		add_months(날짜, 숫자)

	- 데이터 타입 변환
		- 묵시적 타입 변환 : 쿼리 실행과정에서 자동으로 데이터타입이 변환됨
			문자 --> 숫자 (문자가 숫자로만 구성되어 있을 때)
			문자 --> 날짜 (문자가 날짜표기 형식의 문자일 때)
		- 명시적 타입 변환
			숫자 --> 문자 : 숫자를 지정된 포맷형식의 문자로 변환한다.
				to_char(숫자, '포맷형식')
			문자 --> 숫자 : 특정 패턴으로 작성된 숫자형식의 문자를 숫자로 변환한다.
				to_number('특정패턴으로 구성된 숫자형식의 문자', '패턴')
				패턴 문자
					9	숫자를 나타낸다
					0	숫자를 나타낸다.		
					$	달러 기호를 나타낸다.
					.	소숫점을 나타낸다.
					,	자릿수를 나타낸다.
			

			날짜 --> 문자 : 날짜를 지정된 포맷형식의 문자로 변환한다.
				to_char(날짜, '포맷형식')
			문자 --> 날짜 : 특정 패턴으로 작성된 날짜형식의 문자를 날짜로 변환한다.
				to_date('특정 패턴으로 작성된 날짜형식의 문자', '패턴')
				패턴 문자
					YYYY		년도를 나타낸다.
					MM		월을 나타낸다.
					DD		일을 나타낸다.
					AM		오전 오후를 나타낸다.
					HH, HH12, HH24	시간을 나타낸다.
					MI		분을 나타낸다.
					SS		초를 나타낸다.
	- 기타함수
		- nvl(null값이 예상되는 컬럼, 대체할 값)
			- nvl은 null값을 지정된 대체값으로 변환한다.
			  * 컬럼의 값이 null이 아닌 경우에는 그 컬럼의 원래값이 반환된다.
			- nvl에서는 첫번째 항목과 두번째 항목의 데이터 타입이 동일해야 한다.
			- 주로 null값을 포함하고 있는 컬럼이 연산식에 포함되어 있을 때 사용한다.
			  예) 커미션포인트가 적용된 직원의 연봉 계산하기
			      (급여 + 급여*커미션포인트)*12에서 커미션포인트가 null인 직원은 연봉이 null 계산됨
			      (급여 + 급여*nvl(커미션포인트, 0))*12 와 같은 방식으로 활용된다.
		- case
			- 제시된 조건에 따라서 다른 조회결과를 제공받을 수 있다.
			- java의 switch나 if ~ else if ~ else과 유사한다.
			예) 
			   사용법1 : 제시된 조건식과 만족하면 then에 정의된 반환값이 반환된다.
			   select column, column, 
				  case
					when 조건식1 then 반환값1
					when 조건식2 then 반환값2
					when 조건식3 then 반환값3
					else 반환값4
				  end
			   from table;
			   * equal비교, 크다/작다 비교 가능하다.

			   사용법2 : 제시된 column3의 값과 일치하는 비교값을 가진 then에 정의된 반환값이 반환된다.
			   select column1, column2,
				case column3
					when 비교값1 then 반환값1
					when 비교값2 then 반환값2
					when 비교값3 then 반환값3
					else 반환값4
				end
			   from table
			   * equal비교
		- decode
			- 제시된 조건에 따라서 다른 조회결과를 제공받을 수 있다.
			- java의 switch와 유사한다.
			  사용법 : column3의 값과 일치하는 비교값 다음의 반환값이 반환된다.
                                   일치하는 비교값이 존재하지 않으면 반환값4가 반환된다. 
			  select column1, column2,
				 decode(column3, 비교값1, 반환값1,
						 비교값2, 반환값2,
						 비교값3, 반환값3,
					         반환값4)
			  from table;
			  * equal 비교

			
			











		
		