소스코드의 빌드과정
	- 바이크코드 언어(자바)
		* 소스코드 작성하기
		* 소스코드를 실행파일로 컴파일하기
			javac.exe A.java 
			---> A.class 파일 생성
		* 실행파일을 가상머신에서 실행시키기
			java.exe A
			---> 가상머신 실행 ---> 바이트코드 검증 ---> 클래스로드 ---> 기계어 변환 ---> 프로그램 실행
	- 인터프리터 언어(javascript, python, ruby)
		* 인터프리터 언어는 별도의 실행파일이 필요하지 않기 때문에 컴파일 과정이 생략된다.
		* 소스코드 ---> 인터프리터 ---> 프로그램 실행
	- 컴파일 언어(C, C++)
		* 컴파일 언어는 기계어로 바로 변환되어 실행된다.
		* 실행속도가 가장 빠르다.
		* 빌드과정 
			- 전처리기 -> 파싱 -> 번역 -> 어셈블리 -> 링킹 -> 로딩 -> 실행

애플리케이션 배포 단위
	- 애플리케이션은 배포시 다양한 단위로 패키징한 후 배포된다.
	- 자바의 경우 jar, war, ear 등으로 패키징되어서 배포된다.
	- jar(Java Archive)
		* 자바 라이브러리, 리소스, property등을 포함한다.
		* 프로그램에서 참조하는 라이브러리들이 jar 단위로 패키징되어 배포된다.
	- war(Web Archive)
		* 웹 애플리케이션 서버에 배포되는 형식이다.
		* 서블릿, JSP, WEB-INF 폴더의 파일로 구성된다.
	- ear(Enterprise Archive)
		* jar와 war를 묶어서 하나의 완성된 애플리케이션 서비스로 제공할 수 있다.

형상관리 시스템
	- 형상관리 시스템은 스프트웨어 개발 및 운영/유지보수에 필요한 문서/변경이력/소스버전을 관리한다.
	- 소프트웨어 개발과전에서 생상되는 모든 작업 산출물에 대해서 식별표시를 붙이고 변경이력을 추적한다.
	- SubVersion, CVS, Git 등의 도구가 있다.

Git의 주요 명령어
	git --version
   		- 현재 버전 조회
	git init
   		- 현재 폴더에 로컬 저장소 생성
	git status
   		- 현재 로컬 저장소의 상태 조회
	git add *   
   		- 현재 폴더 및 하위 폴더의 모든 파일을 스테이징 영역에 추가
	git add 파일명
   		- 지정된 이름의 파일을 스테이징 영역에 추가
	git commit -m "커밋메세지"
   		- 스테이징 영역에 추가된 파일에 대한 스냅샷을 로컬저장소에 저장한다.
	git log
   		- 커밋 로그를 조회한다.

	git remote add 원격저장소명 원격저장소주소
   		- 현재 로컬 저장소에 대한 원격저장소를 추가한다.
		- 원격저장소명은 보통 origin으로 한다.
   		- 원격저장소 주소는 github에서 생성한 저장소의 위치다.
   		- git remote add origin https://github.com/seungyeon/abc.git
	git remote remove 원격저장소명   
   		- 현재 로컬 저장소에 대한 원격저장소를 삭제한다.
	git remote remove origingit push 원격저장소명  로컬저장소브랜치명
   		- 로컬저장소의 지정된 브랜치에 커밋된 스냅샷이 원격자장소에 보내진다.
	git push origin mastergit pull 원격저장소명
   		- 원격저장소에서 데이터를 가져온다.원격저장소의 데이터를 가져와서 자동으로 로컬저장소와 병합시킨다.git pull origin
	git fetch 원격저장소명
   		- 원격저장소에서 데이터를 가져온다. git fecth origin
	git clone 원격저장소주소
   		- 지정된 원격저장소를 복제해서 로컬 저장소를 생성한다.
	git remote -v
   		- 원격저장소의 목록을 조회한다.

	git branch 브랜치명
		현재 브랜치에서 새로운 브랜치를 생성한다.
		새로 생성된 브랜치는 현재 작업영역의 마지막 커밋결과를 가리킨다.
	git checkout 브랜치명
		현재 브랜치에서 지정된 브랜치로 옮겨간다.
	git merge 브랜치명
		현재 브랜치에 지정된 브랜치의 내용을 병합한다.
		* 현재 브랜치 = master
		* 브랜치명 = hotfix
		* hotfix브랜치를 생성한 후 오류를 수정하고, 검증완료 함.
		* hotfix브랜치의 소스를 master에 반영(병합)하려고 함
		1. hotfix에서 master로 이동
			git checkout master
		2. hotfix의 내용을 master에 병합
			git merge hotfix

소스코드 검증도구
	- 소스코드 검증도구는 구현된 SW를 실행하지 않고 테스트하는 정적 테스트 도구와
	  구현된 SW를 실행하여 동작을 보면서 테스트하는 동적 테스트 도구로 구분된다.
	- 정적 테스트 도구의 사용목적
		* 코딩의 오류, 성능저하, 보안 취약점 등의 결함을 발견하기 위해 사용한다.
		* 개발 생산성과 코드 품질을 향상시킬 수 있다.
	- 동적 테스트 도구의 사용목적
		* 테스트 미수행 코드를 확인하고, 애플리케이션의 안정성을 제고한다.
		* 단위테스트, 통합테스트가 동적 테스트의 대표적인 예다.
	- 코드 인스펙션(Code Inspection)
		* 대표적인 정적 테스트 방법이다.
		* 빌드도구와 연계하여 빌드/배포 시 수행한다.
		* 사전에 정의된 코드 작성 규칙을 기반으로 소스코드를 점검한다.
		* SonarQube 등 활용해서 수행할 수 있다.
	- 테스트 프레임워크(동적 분석 도구)
		* 자바는 오픈소스 기반의 Junit을 가장 많이 사용한다.
		* Junit은 자바 개발환경의 범용적인 표준으로 사용되고 있다.
		* Junit은 이클립스 등의 개발도구에 플러그인 형태로 내장되어 있다.

애플리케이션 빌드하기
	- 지속적인 통합(CI: Continuous Integration) 환경
		* 애플리케이션 개발 과정 중 지속적으로 개발된 프로그램을 통합/빌드/배포하여 애플리케이션의 개발내역을 검증, 테스트할 수 있는 환경이다.
		* 통합 빌드 과정 중 테스트도구, 소스코드 품질측정 도구와 연계할 수 있다.
		* 자동화된 스케줄 관리를 통해서 지속적이고 반복적인 프로그램 빌드 및 테스트를 진행할 수 있다.
		* 대표적인 CI 도구는 허드슨, 젠킨스 등이 있다.

애플리케이션 배포하기
	- Maven
		* 아파치 소프트웨어 재단에서 개발한 자바 기반의 빌드도구다.
		* 프로젝트의 라이프사이클 관리를 위한 빌드도구다.
		* 컴파일과 빌드를 동시에 수행하고, 테스트를 병행하거나 서브측에 배포할 수 있다.
		* 프로젝트와 관련된 라이브러리 의존성 관리 기능을 포함하고있다.
		* pom.xml에 필요한 라이브러리 의존성을 정의하면 Maven이 알아서 다운받고 설치해 주고, 경로까지 지정해준다.
	- Maven의 특징
		* 컴파일과 빌드를 동시에 수행할 수 있다.
		* pom.xml 파일을 통해서 프로젝트, 라이브러리 의존성 등을 관리할 수 있다.
		* 모든 IDE에서 사용할 수 있다.
	- Maven의 주요 기능
		* 컴파일, 빌드
		* 문서화, 리포팅
		* 의존관계 관리
		* 릴리즈 및 배포
	- pom.xml
		* 메이븐 기반 프로젝트에서 사용되는 설정파일
		* 프로젝트 기본정보, 빌드 설정, 프로젝트 관계 설정, 빌드환경 구성 정보를 포함한다.
	- Maven의 플러그인
		* 메이븐은 여러 개의 플러그인으로 구성되어 있으면, 각각의 플러그인은 하나 이상의 goal(명령, 작업)을 포함하고 있다.
		* Goal은 Maven의 실행단위다.
	- Maven의 라이프사이클
		* Maven은 프로젝트 생성에 필요한 단계(phases)들을 Build LifeCycle이라 정의한다.
		* Build LifeCycle은 default, clean, site 세가지가 표준으로 정의되어 있다.
		* LifeCycle은 단계(phase)들로 구성되면, 각 단계는 일련의 순서를 갖는다.
		* 각 단계(phase)는 실행단위로서 goal과 연결되어 있다.
		* Maven Default 라이프사이클의 주요 단계와 goal은 아래와 같다.
			- 단계:작업
			- resources:resources
			- compiler:complie
			- resources:testResource
			- compiler:testCompile
			- surefire:test
			- jar:jar
		* Maven의 표준 라이프 사이클
			- Clean
				* 명령어
					mvn clean	빌드 시 생성되었던 모든 산출물을 삭제한다.
			- Default
				* 프로젝트 배포절차, 패키지 타입별로 다른 작업이 실행된다.
				* 명령어
					mvn compile	프로젝트의 소스코드를 컴파일 한다.
					mvn test		프로젝트의 테스크케이스를 실행해서 테스트를 수행한다.
					mvn package	개발자가 지정한 war, jar 등의 패키징 작업을 수행한다.
					mvn install	패키징된 패키지파일을 로컬저장소에 설치한다.
					mvn deploy	패키징된 패키지파일을 원격저장소에 배포한다.
					
			- Site
				* 명령어
					mvn site		프로젝트 문서화 절차를 수행한다.
		* Maven의 의존성 관리
			- 개발자는 프로젝트에서 사용할 라이브러리를 pom.xml에 <dependency>로 정의만 해두면 
 			  Maven이 메이븐 저장소를 검색해서 자동으로 추가해준다.
			* 해당 라이브러리가 참조하고 있는 라이브러리까지 모두 찾아서 추가해준다.(의존성 전이)

		

	
			- 

	
	