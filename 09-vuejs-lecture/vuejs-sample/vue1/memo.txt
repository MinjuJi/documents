Vue.js
    - Vue.js는 사용자 인터페이스를 만들기 위한 프로그레시브 프레임워크다.
    - Vue.js의 핵심 라이브러리는 뷰 레이어의 렌더링에만 초점을 맞추어서 개발되었다.
    - Vue.js는 다른 라이브러리나 기존 프로젝트와의 통합이 매우 쉽다.
    - Vue.js는 단일 페이지 애플리케이션(SPA: Single Page Application)의 개발을 완벽하게 지원한다.

Vue.js의 설치
    - html 페이지나 JSP 페이지에 아래의 스크립트 소스를 포함시킨다.
        <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>

Vue.js의 핵심
    - vue.js는 DOM에 데이터를 선언적으로 렌더링할 수 있다.
    - 작성예
        - 화면
            <div id="app">
                {{ message }}
            </div>

        - Vue.js 코드
            var app = new Vue({
                el: "#app",
                data: {
                    message: "안녕하세요. Vue"
                },
                methods: {
                    fn1: function() {
                        수행문;
                        수행문;
                    },
                    fn2: function() {
                        수행문;
                        수행문;
                    }
                }
            });

        - 실행결과
            <div id="app">
                안녕하세요. Vue
            </div>
    - 코드 설명
        # {{}} 
            이중괄호는 Vue객체의 데이터를 선언적으로 렌더링한다.(즉 Vue객체가 가지고 있는 데이터가 표현된다.)
        # var app = new Vue(Option객체);
            Vue 인스턴스를 생성한다.
            Vue 인스턴스를 생성하는 것이 모든 Vue.js 애플리케이션의 시작이다.
            Vue 인스턴스는 전달받은 옵션객체를 활용해서 Vue 인스턴스를 초기화한다.
        # Option객체    
            Vue 인스턴스를 초기화할 때 필요한 정보를 제공한다.
            Option객체는 미리 정의된 프로퍼티에 필요한 값을 설정함으로써 Vue 인스턴스 초기화에 필요한 정보를 제공한다.
            주요 프로퍼티
                el 
                    - Vue.js 애플리케이션을 적용할 엘리먼트를 지정한다.
                data 
                    - 데이터모델 객체를 정의한다.
                    - 데이터모델 객체에 정의된 값은 {{}} 이중괄호를 사용해서 화면에 표시할 수 있다.
                    - 데이터모델 객체의 값이 변경되면 {{}} 이중괄호로 표현한 값도 자동으로 변경된다.
                methods 
                    - 자바스크립트 객체를 정의한다.
                    - 객체에는 사용자와 상호작용하는 메소드를 정의한다.
  
Vue.js의 지시어
    - v-for
        - v-for 지시어를 사용하면 배열 기반의 데이터를 렌더링할 수 있다.
        - v-for 지시어의 형식
            <태그 v-for="item in items">
                {{item}}
            </태그> 의 형태로 작성한다.
            # items는 데이터 모델객체에 저장된 원본 배열이다.
            # item은 반복처리될 때 배열의 각 요소를 가르키는 별칭이다.

            <태그 v-for="(item, index) in items">
                {{index}} {{item}}
            </태그>
            # index는 현재 처리중인 배열의 인덱스를 전달받는다.
        - v-for 지시어는 감시중인 배열의 데이터가 변경되는 뷰를 자동으로 갱신한다.
            # Vue가 감시하는 배열에서 아래의 메소드가 실행될 때 데이터의 변경을 감지한다.
                push(), pop(), shift(), unshift(), splice(), sort(), reverse()
                ! 주의사항 - filter(), concat(), slice()는 항상 새로운 배열을 반환하기 때문에 원본 배열의 데이터가 변경되지 않는다.
    - v-if, v-else-if, v-if 
        - v-if 지시어를 사용하면 엘리먼트를 표시 여부를 제어할 수 있다.
        - v-if 지시어의 형식
            <태그 v-if="조건식">
                컨텐츠
            </태그> 
            # 조건식의 값이 true로 판정되면 태그와 컨텐츠가 화면에 표시된다.

            <태그 v-if="조건식">
                컨텐츠1
            </태그>
            <태그 v-else>
                컨텐츠2
            </태그> 
            # 조건식이 값이 true로 판정되면 컨텐츠1이 화면에 표시되고, 조건식이 false로 판정되면 컨텐츠2가 표시된다.

            <태그 v-if="조건식1">
                컨텐츠1
            </태그>
            <태그 v-else-if="조건식2">
                컨텐츠2
            </태그>
            <태그 v-else-if="조건식3">
                컨텐츠2
            </태그>
            <태그 v-else>
                컨텐츠3
            </태그>
            # if ~ else if ~ else if ~ else 구문과 같은 방식으로 동작하며 해당 컨텐츠가 화면에 표시된다.
    - v-model
        - v-model은 양방향 데이터 바인딩을 지원한다.
            # 단반향 데이터 바인딩
                데이터모델 객체 -------------> {{표현식}}       
                * 데이터모델 객체에서 표현식에 해당하는 값을 화면에 표시한다.
            # 양뱡향 데이터 바인딩
                데이터모델 객체 <------------>  <input type="text" v-model="프로퍼티명" />
                * 데이터모델 객체에서 프로퍼티명에 해당하는 값을 폼요소(입력필드)에 표시한다.
                * 폼요소(입력필드)의 값을 변경하는 데이터모델 객체에서 해당 프로퍼티의 값이 즉시 변경된다.
        - v-model은 폼요소에서만 사용한다.
            # <input>, <select>, <textarea> 에서 사용한다.(checkbox, radio, password 포함)
        - v-model 지시어의 형식
            <input type="text" v-model="프로퍼티명" />
            # 데이터모델객체에서 프로퍼티명과 일치하는 값을 표현한다.
            # 입력필드에서 값을 변겯하면 데이터모델 객체에서 해당 프로퍼티의 값이 자동으로 변경된다.
            # 만약 해당 프로퍼티의 값을 다른 곳에서 사용하고 있다면, 그 곳에서도 변경된 값이 즉시 적용된다.
    - v-bind
        - v-bind는 엘리먼트의 속성에 대한 설정을 지원한다.
        - v-bind 지시어의 형식
            <태그 v-bind:속성이름="표현식">
            # 속성이름에는 변경하거나 추가할 속성명을 지정한다.
            # 표현식은 Vue 인스턴스에서 값을 조회하는 표현식을 지정한다.
            # 표현식에는 자바스크립트 표현식을 사용할 수 있다.

            <태그 :속성이름="표현식">
            # v-bind:속성이름="표현식"에 대한 단축형이다.
        - 작성예
            <img v-bind:src="imgPath" />
            <img :src="imgPath" />

            <button v-bind:disabled="btnDisabled">버튼</button>
            <button :disabled="btnDisabled">버튼</button>
            <script>
                new Vue({
                    el: "#app",
                    data:{
                        btnDisabled:false,
                        imgPath: "/resources/images/logo.png"
                    }
                })
            </script>


Vue.js의 이벤트 처리
    - 사용자가 애플리케이션과 상호 작용할 수 있게 하기 위해 v-on 디렉티브를 사용하여 Vue 인스턴스에서 메소드를 호출하는 이벤트 리스너를 추가할 수 있다.
    - v-on 지시어의 형식
        <태그 v-on:이벤트이름="이벤트리스너">    
        # 이벤트이름은 자바스크립트의 이벤트명(onclick, onmouseenter, onchange, onfocus)에서 on을 생략한 이름을 붙인다.
        # 이벤트리스너는 지정된 이벤트 발생시 실행할 자바스크립트 함수를 지정한다.
        # 이벤트리스너에 지정될 함수는 Vue 인스턴스의 methods 객체에 정의된 메소드를 사용한다.

        <태그 @이벤트이름="이벤트리스너">
        # v-on:이벤트명 대신 @이벤트명으로 약식표현할 수 있다.

    - 작성예
        <button v-on:click="openModal()">팝업열기</button>
        <button @click="openModal()">팝업열기</button>

        <script>
            new Vue({
                el: "#app",
                data: {

                },
                methods: {
                    openModal: function() {
                        $("#myModal").modal("show");
                    }
                }
            });
        </script>



