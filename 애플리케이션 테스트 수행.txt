테스트의 목적
	- 각 애플리케이션 간 연계 및 연동을 확인한다.
	- 비정상적인 결과 발생부분을 확인하고, 결함을 해결하기 위해 실행한다.
	- 업무흐름의 적절성 및 정상적인 업무처리 여부를 확인한다.
	- 기능요소와 비기능적 요소의 적합성 및 사용 편의성 확인

테스트의 수행 순서
	- 테스트의 목적과 범위를 확인한다.
	- 테스트케이스를 작성한다.
	- 테스트환경을 구성한다.
	- 단위테스트를 실행하고, 결함을 조치한다.
	- 통합테스트를 실행한다.
	- 성능테스트를 실행하고, 결과보고서를 작성한다.

애플리케이션 테스트의 종류
	- 단위 테스트
		* 작은 소프트웨어 단위를 테스트하는 것
		* 개발도구의 발달로 개발 과정 중에 자동으로 진행된다.
	- 통합 테스트
		* 모듈 사이의 인터페이스, 통합된 컴포넌트 간의 상호작용을 테스트하는 것
		* 하나의 프로세스가 완성된 경우 통합테스트를 수행한다.
	- 시스템 테스트
		* 통합된 단위 시스템의 기능이 시스템에서 정상 동작하는지 테스트하는 것
		* 성능 및 장애 테스트가 여기에 해당한다.

단위 테스트의 특징
	- 소프트웨어 내에서 결함은 찾고 기능을 검증한다.
	- 개발자가 직접 수행한다.
	- 개발된 코드 및 모듈의 범위내에서 정상적인 작동여부를 테스트한다.

통합 테스트의 특징
	- 통합 테스트는 컴포넌트 간 인터페이스 테스트를 수행한다.
	- 빅뱅식, 상향식, 하향식 등의 테스트 방법이 있다.

시스템 테스트의 특징
	- 실제 최종 사용자 환경과 유사한 환경에서 테스트를 수행한다.
	- 시스템의 성능과 장애관련 리스크를 최소화하기 위해 수행한다.


결함
	- 결함은 프로그램과 명세서 간의 차이, 업무 내용 불일치다.
	- 결함은 기대결과와 실제 관찰 결과 간의 차이다.
	- 시스템이 사용자가 기대하는 기대치를 만족시키지 못하거나 변경이 필요한 경우다.

결함의 종류
	- 시스템 결함
		* 비정상적인 종료/중단, 응답시간 지연, 데이터베이스 에러 등 애플리케이션 환경에서 발생하는 결함이다.
	- 기능 결함
		* 사용자의 요구사항 미반영/불일치, 부정확한 비즈니스 프로세스, 타 시스템과의 연동 오류 등에서 발생하는 결함이다.
	- GUI 결함
		* 응용 프로그램의 UI 비일관성, 부정확한 커서/메세지, 데이터 타입의 표시 등에서 발생하는 결함이다.
	- 문서 결함
		* 사용자 온라인/오프라인 매뉴얼의 불일치, 요구사항 분석서오 기능 요구사항의 불일치로 인한 결함이다.

소프트웨어 테스트 기법
	- 단위테스트 기법
		* JUnit을 활용한 테스트다.
		* JUnit는 자바 기반의 단위테스트 프레임워크다.
		* JUnit을 활용한 테스트 케이스 작성하기
			- 테스트 클래스를 작성한다.
			- 테스트 메소드를 작성한다.
			- 테스트 메소드는 @Test 어노테이션을 붙인다.
			- @Ignore는 테스트메소드를 테스트 대상에서 제외시킨다.
			- 테스트 메소드 실행 전처리/후처리를 위해 @Before, @After를 사용한다.
			- 테스트 수행 후 실패로 표시된 기능이 결함관리 대상이다.
	- 통합테스트 기법
		* 전체 시스템의 통합이 완료될 때까지 단위 시스템 간의 연계성 및 기능 요구사항을 확인한다.
		* 업무 간의 연게성과 상호 운용성 중심의 테스트를 수행한다.
	- 시스템테스트 기법
		* 부하 및 성능을 테스트한다.
		* 동시 이용자수, 처리량, 대기시간 등을 측정해서 테스트한다.

결함의 조치
	- 서버측의 결함조치
		* 웹브라우저에 표시된 HTTP 응답코드를 확인한다.
		* 응답코드가 5XX인 경우 웹브라우저에 표시된 에러 메세지와 이클립스 콘솔창의 에러 메세지를 확인한다.
		* 에러가 발생한 코드를 확인하고, 해당 코드를 결함조치한다.
		* 에러가 발생한 지점을 찾을 수 없을 때는 에러 발생이 예상되는 코드에 브레이크 포인트를 표시하고,
		  웹서버를 디버그 모드를 다시 실행한다.
		* 해당 페이지에 접속해서 디버그 창이 표시되면 코드를 한 단계씩 실행하면서 결함지점을 찾고, 결함을 조치한다.
	- 프론트엔드측의 결함조치
		* 크롬 개발자 도구를 실행한다.
		* 크롬 개발자 도구에서 콘솔창의 에러 메세지를 확인하고, 에러가 발생한 코드를 확인한다.
		* 에러 지점이 부정확하거나 기대값과 다른 실행결과가 나오면, 스크립트 코드에 브레이크포인트를 표시하고,
		  해당 프론트엔드 기능을 실행한다.
		* 코드를 한 단계씩 실행하면서 결함이 있는 코드를 찾고, 결함을 조치한다.

